namespace Thrume.Api;

app.MapPost("/upload", async (
        HttpContent context,
        IFormFile file,
        IAmazonS3 s3Client,
        IOptions<MinioConfiguration> minioOptionsAccessor,
        ILogger<Program> logger
    ) =>
    {
        var settings = minioOptionsAccessor.Value; 
        if (file is {Length: 0, ContentType: var contentType} && !contentType.Contains("image"))
        {
            logger.LogWarning("Upload attempt failed: No file provided or file type is not image.");
            return Results.BadRequest("No file uploaded.");
        }

        var uniqueFileName = $"{Guid.NewGuid()}{Path.GetExtension(file.FileName)}";
        logger.LogInformation("Attempting to upload file '{OriginalName}' as '{UniqueName}' to bucket '{BucketName}'",
            file.FileName, uniqueFileName, settings.BucketName); // Use settings.BucketName

        try
        {
            await using var stream = file.OpenReadStream();
            var putRequest = new PutObjectRequest
            {
                BucketName = settings.BucketName, // Use settings.BucketName
                Key = uniqueFileName,
                InputStream = stream,
                ContentType = file.ContentType
            };

            var response = await s3Client.PutObjectAsync(putRequest);

            logger.LogInformation("File '{UniqueName}' uploaded successfully to bucket '{BucketName}'. ETag: {ETag}",
                uniqueFileName, settings.BucketName, response.ETag); // Use settings.BucketName

            // Construct URL using 'settings'
            var fileUrl =
                $"{settings.ServiceUrl.TrimEnd('/')}/{settings.BucketName}/{uniqueFileName}"; // Use settings.ServiceURL and settings.BucketName

            return Results.Ok(new { FileName = uniqueFileName, Url = fileUrl });
        }
        catch (AmazonS3Exception ex)
        {
            logger.LogError(ex, "S3 Error uploading file {UniqueName} to bucket {BucketName}: {ErrorMessage}",
                uniqueFileName, settings.BucketName, ex.Message); // Use settings.BucketName
            return Results.Problem($"Error uploading file: {ex.Message}", statusCode: (int?)ex.StatusCode ?? 500);
        }
        catch (Exception ex)
        {
            logger.LogError(ex, "Unexpected error uploading file {UniqueName} to bucket {BucketName}",
                uniqueFileName, settings.BucketName); // Use settings.BucketName
            return Results.Problem("An unexpected error occurred during file upload.", statusCode: 500);
        }
    })
    .Accepts<IFormFile>("multipart/form-data")
    .DisableAntiforgery(); //TODO